/*
CONFIGURATION FILE.

All values are evaluated in this order:

|| Application Code (Defaults)
|| Configuration File
|| Environment Variables
|| Command Line
\/

The same value defined e.g. as an environment variable will overwrite the default of a configuration file.

You can use the following syntax to assign the content of one value to another: NEWVALUE=%{OLDVALUE}

Example:
  g_SkipUnitTests=g_debug
  g_myPath=g_path1;g_path2

To inherit the content of the same variable use: VALUE=%{inherit}

Example:
  g_SkipUnitTests=%{inherit} // if this was passed to the command line the value will be inherited from the environment or configuration file
*/

g_disableStringAccessCheck=true
g_moduleDiagnostic=true
g_disableOpenGLExtensions=GL_NV_command_list;GL_ARB_direct_state_access:amd;GL_ARB_sampler_objects:amd;GL_ARB_texture_view:intel

// g_memoryBacktrace=true

// disable debug breaks
// g_enableDebugBreak = false

// disable parallel execution of all ParallelFor loops:
// g_enableParallelFor = false

// output diagnostic data for class registation, layout and initialization
// g_showRegistrationProcess = 0

// breaks immediatly when registration of a module fails.
// g_breakOnRegistrationError = false

// skip the units tests of the test modules
// g_skipUnitTests=true

// set the memory model, possible values are 'c', 'debug' and 'release'
// g_alloc=c

// log all output to a file
// if no path is specified the log file will be created in the temporary folder
// g_logFile=[string]

// enable/disable console (Windows only and only if no debugger is present)
g_console = false

// allow/disallow diagnostic messages in console
g_diagnostic=true

// allow/disallow debug messages in console
// g_debug = false

// allow/disallow warning messages in console
// g_warning = false

// allow/disallow critical messages in console
// g_critical = false

// don't group memory leaks, show long output
// g_displayShortLeakList = false

// select startup language
// g_startupLanguage = en-US

// output diagnostic data of cadexchange module and selected import settings
// g_cadexchangelog=true

// disable environment variables
// g_disableEnvironment=true

// disable command line arguments
// g_disableCommandLine=true

// show a complete list of the current configuration originating from configuration file, environment and command line
// g_outputConfiguration=true

// override the default module path. it can contain multiple entries. use ';' as delimiter.
// g_modulePath=[string] (default "%{g_startupPath}")

// override the default temporary path
// g_tempPath=[string] (default "%{g_tempPath}")

// override the default preference path
// g_prefsPath=[string] (default "%{g_prefsPath}")

// list of modules that will exclusively be loaded (do not include path or suffix). use ';' as delimiter.
// g_modulePositives=[string]

// list of modules that will not be loaded (do not include path or suffix). use ';' as delimiter.
// g_moduleNegatives=[string]

// debug tool to force allocations to fail; only works with alloc=debug 
// any allocation bigger or equal than this will fail
// g_makeAllocationsFail = 1000000

// decrease or increase number of CPUs / threads used
// note that the number can be higher than the actual number of cores
// g_threadCount = 128

// disable loading of unicode table, a default table will be used instead
// g_loadUnicodeTable = false

// disable the real vtune module if not needed by choosing the null implementation
// maxon.PerformanceMonitorInterface=PerformanceMonitorInterfaceNull

// disable AVX processor extensions
// g_disableAVX=true

// disable AVX2 processor extensions
// g_disableAVX2=true

// disable FMA processor extensions
// g_disableFMA=true

// disable AES processor extensions
// g_disableAES=true

// disable PCLMULQDQ processor extensions
// g_disablePCLMULQDQ=true

// disable SSE2 processor extensions
// g_disableSSE2=true

// disable SSE3 processor extensions
// g_disableSSE3=true

// disable SSE4_1 processor extensions
// g_disableSSE4_1=true

// disable SSE4_2 processor extensions
// g_disableSSE4_2=true

// Choose the run loop:
// Default implementation (usually for UI).
// Command line (no UI used/initialized).
// Gtk (Linux-only).
net.maxon.interface.runloop=DefaultRunLoopImpl
//net.maxon.interface.runloop=CmdLineRunLoopImpl
//net.maxon.interface.runloop=GtkPlusRunLoopImpl

